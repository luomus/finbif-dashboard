kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: finbif-dashboard
  - name: ACCESS_MODE
    required: true
    value: ReadWriteOnce
  - name: STORAGE_CLASS
    required: true
    value: standard-csi
  - name: STORAGE
    required: true
    value: "20Gi"
  - name: API
    required: true
    value: plumber
  - name: APP_PORT
    required: true
    value: "3838"
  - name: API_PORT
    required: true
    value: "8000"
  - name: PROXY_PORT
    required: true
    value: "8080"
  - name: DB
    required: true
    value: postgres
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$POSTGRES_PASSWORD
        psql -h 0.0.0.0 -U postgres -d postgres -c \"SELECT 1\""
    ]'
  - name: DB_PORT
    required: true
    value: "5432"
  - name: DB_PATH
    required: true
    value: /var/lib/postgresql/data
  - name: DB_DATA
    required: true
    value: /pgdata
  - name: DB_PASSWORD
    required: true
  - name: NGINX_TEMPLATE
    required: true
  - name: TLS_CRT
    required: true
  - name: TLS_KEY
    required: true
  - name: FINBIF_PRIVATE_API
    required: true
  - name: HOST
    required: true
  - name: APP_HEALTH
    required: true
    value: /robots.txt
  - name: API_HEALTH
    required: true
    value: /healthz
  - name: LIVENESS_PERIOD
    required: true
    value: "30"
  - name: FAILURE_THRESHOLD
    required: true
    value: "5"
  - name: READINESS_PERIOD
    required: true
    value: "5"
  - name: SMTP_SERVER
    required: true
  - name: SMTP_PORT
    required: true
  - name: ERROR_EMAIL_TO
    required: true
  - name: ERROR_EMAIL_FROM
    required: true
  - name: MEMORY
    required: true
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: ${STORAGE_CLASS}
    accessModes:
    - ${ACCESS_MODE}
    resources:
      requests:
        storage: ${STORAGE}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  data:
    branch: ${BRANCH}
    db_port: ${DB_PORT}
    app_port: ${APP_PORT}
    api_port: ${API_PORT}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: nginx-template-${BRANCH}
  data:
    default.conf.template: ${NGINX_TEMPLATE}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
  type: Opaque
  data:
    db_password: ${DB_PASSWORD}
- kind: Secret
  apiVersion: v1
  metadata:
    name: tls-${BRANCH}
  type: kubernetes.io/tls
  data:
    tls.crt: ${TLS_CRT}
    tls.key: ${TLS_KEY}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${PROXY_PORT}
      spec:
        volumes:
        - name: tls-${BRANCH}
          secret:
            secretName: tls-${BRANCH}
        - name: nginx-template-${BRANCH}
          configMap:
            name: nginx-template-${BRANCH}
        containers:
        - image: nginxinc/nginx-unprivileged:1.27.1
          imagePullPolicy: Always
          name: nginx-${BRANCH}
          env:
          - name: PROXY_PORT
            value: ${PROXY_PORT}
          - name: APP_PORT
            value: ${APP_PORT}
          ports:
          - containerPort: ${{PROXY_PORT}}
          resources:
            limits:
              cpu: "500m"
              memory: "500Mi"
          volumeMounts:
          - name: tls-${BRANCH}
            mountPath: /etc/ssl
            readOnly: true
          - name: nginx-template-${BRANCH}
            mountPath: /etc/nginx/templates
            readOnly: true
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          imagePullPolicy: Always
          name: ${APP}-${BRANCH}
          command:
            - '/home/user/render.r'
          env:
          - name: DASHBOARD_API
            value: ${API}-${BRANCH}
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: HOST
            value: ${HOST}
          startupProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: ${APP_HEALTH}
              port: ${{APP_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
          resources:
            limits:
              cpu: "2000m"
              memory: ${MEMORY}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${API_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/${APP}:${BRANCH}
          imagePullPolicy: Always
          name: ${API}-${BRANCH}
          env:
          - name: FINBIF_PRIVATE_API
            value: ${FINBIF_PRIVATE_API}
          - name: FINBIF_USE_PRIVATE_API
            value: "true"
          - name: FINBIF_DEBUG
            value: stdout
          - name: FINBIF_USER_AGENT
            value: https://github.com/luomus/${APP}:${BRANCH}
          - name: PGHOST
            value: ${DB}-${BRANCH}
          - name: PGPORT
            value: ${DB_PORT}
          - name: PGUSER
            value: ${DB}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          - name: DB_NAME
            value: ${DB}
          - name: BRANCH
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: branch
          - name: SMTP_SERVER
            value: ${SMTP_SERVER}
          - name: SMTP_PORT
            value: ${SMTP_PORT}
          - name: ERROR_EMAIL_TO
            value: ${ERROR_EMAIL_TO}
          - name: ERROR_EMAIL_FROM
            value: ${ERROR_EMAIL_FROM}
          ports:
          - containerPort: ${{API_PORT}}
          startupProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            httpGet:
              path: ${API_HEALTH}
              port: ${{API_PORT}}
            periodSeconds: ${{READINESS_PERIOD}}
        resources:
          limits:
            cpu: "2000m"
            memory: ${MEMORY}
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APP}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          branch: ${BRANCH}
          port: ${DB_PORT}
      spec:
        containers:
        - image: ghcr.io/luomus/postgis-image:main
          imagePullPolicy: Always
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: ${DB_PATH}
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          startupProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: ${{FAILURE_THRESHOLD}}
            periodSeconds: ${{LIVENESS_PERIOD}}
          readinessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            periodSeconds: ${{READINESS_PERIOD}}
          env:
          - name: PGDATA
            value: ${DB_PATH}${DB_DATA}
          - name: POSTGRES_DB
            value: ${DB}
          - name: POSTGRES_PORT
            valueFrom:
              configMapKeyRef:
                name: ${APP}-${BRANCH}
                key: db_port
          - name: POSTGRES_USER
            value: ${DB}
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP}-${BRANCH}
                key: db_password
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${PROXY_PORT}
      port: ${{PROXY_PORT}}
      targetPort: ${{PROXY_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${PROXY_PORT}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${API_PORT}
      port: ${{API_PORT}}
      targetPort: ${{API_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${API_PORT}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      branch: ${BRANCH}
      port: ${DB_PORT}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{PROXY_PORT}}
    tls:
      termination: passthrough
      insecureEdgeTerminationPolicy: Redirect
    to:
      kind: Service
      name: ${APP}-${BRANCH}
