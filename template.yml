kind: Template
apiVersion: template.openshift.io/v1
parameters:
  - name: BRANCH
    required: true
  - name: APP
    required: true
    value: finbif-dashboard
  - name: API
    required: true
    value: plumber
  - name: APP_PORT
    required: true
    value: "3838"
  - name: API_PORT
    required: true
    value: "8000"
  - name: APP_CMD
    required: true
    value: '["/home/user/render.r"]'
  - name: DB
    required: true
    value: postgres
  - name: DB_IMAGE
    required: true
    value: crunchydata/crunchy-postgres:centos8-13.6-4.7.5
  - name: DB_HEALTHCHECK
    required: true
    value: '[
      "sh",
      "-c",
      "PGPASSWORD=$PG_PASSWORD
        psql -h 0.0.0.0 -U $PG_USER -d $PG_DATABASE -c \"SELECT 1\""
    ]'
  - name: DB_PORT
    required: true
  - name: DB_MODE
    required: true
    value: primary
  - name: DB_NAME
    required: true
  - name: DB_USER
    required: true
  - name: DB_PRIMARY_USER
    required: true
  - name: DB_SUPER_USER
    required: true
  - name: DB_USER_PASSWORD
    required: true
  - name: DB_PRIMARY_PASSWORD
    required: true
  - name: DB_SUPER_PASSWORD
    required: true
  - name: FINBIF_PRIVATE_API
    required: true
  - name: HOST
    required: true
  - name: GITHUB_SECRET
    required: true
    generate: expression
    from: "[a-zA-Z0-9]{64}"
metadata:
  name: ${APP}
objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
   name: ${DB}-${BRANCH}
  spec:
    storageClassName: "standard-rwo"
    accessModes:
    - ReadWriteOnce
    persistentVolumeReclaimPolicy: Retain
    resources:
      requests:
        storage: "10Gi"
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    lookupPolicy:
      local: true
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APP}-${BRANCH}:latest
    source:
      type: Git
      git:
        uri: https://github.com/luomus/${APP}.git
        ref: ${BRANCH}
    strategy:
      type: Docker
    triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: ${GITHUB_SECRET}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${APP}-${BRANCH}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${APP}-${BRANCH}
      spec:
        containers:
        - image: ${APP}-${BRANCH}:latest
          name: ${APP}-${BRANCH}
          command: ${{APP_CMD}}
          env:
          - name: DASHBOARD_API
            value: ${API}-${BRANCH}.${APP}.svc:${API_PORT}
          ports:
          - containerPort: ${{APP_PORT}}
          livenessProbe:
            httpGet:
              port: ${{APP_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              port: ${{APP_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APP}-${BRANCH}
        from:
          kind: ImageStreamTag
          name: ${APP}-${BRANCH}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${API}-${BRANCH}
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${API}-${BRANCH}
      spec:
        containers:
        - image: ${APP}-${BRANCH}:latest
          name: ${API}-${BRANCH}
          env:
          - name: FINBIF_PRIVATE_API
            value: ${FINBIF_PRIVATE_API}
          - name: PGHOST
            value: ${DB}-${BRANCH}
          - name: PGPORT
            value: ${DB_PORT}
          - name: PGUSER
            value: ${DB_SUPER_USER}
          - name: PGPASSWORD
            value: ${DB_SUPER_PASSWORD}
          - name: DB_NAME
            value: ${DB_NAME}
          ports:
          - containerPort: ${{API_PORT}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: ${{API_PORT}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: ${{API_PORT}}
            initialDelaySeconds: 5
            periodSeconds: 5
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${API}-${BRANCH}
        from:
          kind: ImageStreamTag
          name: ${APP}-${BRANCH}:latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    replicas: 1
    selector:
      app: ${APP}
      deploymentconfig: ${DB}-${BRANCH}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP}
          deploymentconfig: ${DB}-${BRANCH}
      spec:
        containers:
        - image: ${DB_IMAGE}
          name: ${DB}-${BRANCH}
          volumeMounts:
          - mountPath: /pgdata
            name: ${DB}-${BRANCH}
          ports:
            - containerPort: ${{DB_PORT}}
          livenessProbe:
            exec:
              command: ${{DB_HEALTHCHECK}}
            failureThreshold: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              command: ${{DB_HEALTHCHECK}}
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
          - name: MODE
            value: ${DB}
          - name: PG_MODE
            value: ${DB_MODE}
          - name: PG_PRIMARY_PORT
            value: ${DB_PORT}
          - name: PG_DATABASE
            value: ${DB_NAME}
          - name: PG_USER
            value: ${DB_USER}
          - name: PG_PRIMARY_USER
            value: ${DB_PRIMARY_USER}
          - name: PG_PASSWORD
            value: ${DB_USER_PASSWORD}
          - name: PG_PRIMARY_PASSWORD
            value: ${DB_PRIMARY_PASSWORD}
          - name: PG_ROOT_PASSWORD
            value: ${DB_SUPER_PASSWORD}
        volumes:
        - name: ${DB}-${BRANCH}
          persistentVolumeClaim:
            claimName: ${DB}-${BRANCH}
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${APP_PORT}
      port: ${{APP_PORT}}
      targetPort: ${{APP_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${APP}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${API}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${API_PORT}
      port: ${{API_PORT}}
      targetPort: ${{API_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${API}-${BRANCH}
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DB}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    ports:
    - name: ${DB_PORT}
      port: ${{DB_PORT}}
      targetPort: ${{DB_PORT}}
    selector:
      app: ${APP}
      deploymentconfig: ${DB}-${BRANCH}
- kind: Route
  apiVersion: v1
  metadata:
    name: ${APP}-${BRANCH}
    labels:
      app: ${APP}
  spec:
    host: ${HOST}
    port:
      targetPort: ${{APP_PORT}}
    tls:
      termination: edge
    to:
      kind: Service
      name: ${APP}-${BRANCH}
    wildcardPolicy: None
